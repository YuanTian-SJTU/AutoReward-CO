{"sample_order": 64, "function": "def priority(sorted_combinations: dict) -> tuple[int, int, int]:\n    \"\"\"\n    Get the combination of task id and its coverage that that should be prioritised from the sorted combinations,\n    and remove it from the list.\n    The function that determine the priority should be generated by LLM\n\n    Args:\n        sorted_combinations: dict, sorted combinations of task id and its coverage. The key is a tuple, in the format of [index of satellite, index of pass, index of task], and the value is a tuple, containing the indices of points that can be covered by the task. The tuple is likely to be empty, and if so, it means that the corresponding task cannot cover any point. The dict is sorted in ascending order on the number of points that can be covered.\n\n    Returns:\n        tuple[int, int, int], the combination that is prioritised,\n        in the format of [satellite index, pass index, task index], i.e. the key of the prioritised task.\n\n    \"\"\"\n    for key, value in sorted_combinations.items():\n        points_covered = len(value)\n        \n        if points_covered == 0:\n            continue\n        \n        satellite_idx, pass_idx, task_idx = key\n        task_priority = calculate_task_priority(value)\n        \n        if task_priority > 0.7:\n            return (satellite_idx, pass_idx, task_idx)\n        \n        # Some additional checks\n        if points_covered > 10: \n            return (satellite_idx, pass_idx, task_idx)\n        \n        if task_priority < 0.3:\n            continue\n\n    return (0, 0, 0)\n\n", "score": -53.499}